kind: Template
apiVersion: v1
metadata:
  name: ncr-springboot-app
  annotations:
    description: NCR template for creating a Spring Boot application built with maven
    iconClass: icon-jboss
    tags: instant-app,springboot,maven,java
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  displayName: Application name
  required: true
- description: 'Custom hostname for service routes.  Leave blank for default hostname,
  e.g.: <application-name>.<project>.<default-domain-suffix>'
  name: APPLICATION_HOSTNAME
  displayName: Application hostname
- description: Application options. These options will be passed to the Spring Boot command line
  name: APP_OPTIONS
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    triggers: []
    source:
      type: Binary
      binary: {}
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: openjdk18-openshift:latest
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}:latest"
    resources: {}
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      openshift.io/image.insecureRepository: "true"
  spec:
    dockerImageRepository: nexus.os1.phx2.redhat.com:8081/${APPLICATION_NAME}
    tags:
    - name: latest
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}"
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
    replicas: 1
    selector:
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        containers:
        - name: "${APPLICATION_NAME}"
          image: "${APPLICATION_NAME}"
          ports:
          - containerPort: 8080
            protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities: {}
            privileged: false
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
   host: "${APPLICATION_HOSTNAME}"
   to:
    kind: Service
    name: "${APPLICATION_NAME}"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
   ports:
   - name: "${APPLICATION_NAME}-http"
     port: 8080
     targetPort: 8080
   selector:
     deploymentconfig: "${APPLICATION_NAME}"
