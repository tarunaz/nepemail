podTemplate(label: 'maven-ose', cloud: 'openshift', containers: [
  containerTemplate(name: 'jnlp', image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7', args: '${computer.jnlpmac} ${computer.name}'),
  containerTemplate(name: 'maven', image: "registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7", ttyEnabled: true, command: 'cat', workingDir: '/home/jenkins'),
],
volumes: [secretVolume(secretName: 'jenkins-nepemail-token-bfxfb', mountPath: '/etc/jenkins')]) {

    	node('maven-ose') {
        	container(name: 'maven', cloud: 'openshift') {

	def appName = "nepemail"
	def uatProject = "nepemail-uat"
	def tag = "05012017_uat"

    	def WORKSPACE = pwd()

        stage "Dev Deployment"

                login()

		deployApp(appName, uatProject, tag)

                validateDeployment(appName, uatProject)

        }

    }
   
}

def login() {
    sh """
       set +x
       oc login --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --token=\$(cat /etc/jenkins/token) https://openshift.rhc-lab.iad.redhat.com:8443 >/dev/null 2>&1 || echo 'OpenShift login failed'
       """
}

def parseVersion(String filename) {
  def matcher = readFile(filename) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}


def deployApp(appName, namespace, tag) {

	sh """
          set +x
	  
  	  oc project ${namespace}

	  oc import-image nepemail --from=docker-registry-default.cloudapps.rhc-lab.iad.redhat.com/nepemail-int/nepemail:${tag} -n nepemail-uat --confirm 

          imageReference=\$(oc get is ${appName} -n ${namespace} -o jsonpath="{.status.tags[?(@.tag==\\"latest\\")].items[*].dockerImageReference}")

          # update the DeploymnetConfig to deploy the latest version
            oc patch dc/${appName} -n ${namespace} -p "
              {\\"spec\\":
                {\\"template\\":
                  {\\"spec\\":
                    {\\"containers\\":
                      [{
                        \\"name\\":\\"${appName}\\",
                        \\"image\\":\\"\${newImageReference}\\"
                      }]
                    }
                  }
                }
              }"

	  oc rollout latest dc/${appName} -n ${namespace}

          # Sleep for a few moments
          sleep 5
       """


}

def validateDeployment(String appName, String namespace) {

    sh """
      set -x

      COUNTER=0
      DELAY=5
      MAX_COUNTER=30

      echo "Running Acceptance Check of ${appName} in project ${namespace}"

      set +e

      while [ \$COUNTER -lt \$MAX_COUNTER ]
      do

        RESPONSE=\$(curl -s -o /dev/null -w '%{http_code}\\n' http://${appName}.${namespace}.cloudapps.rhc-lab.iad.redhat.com/rest/api/pods)

        if [ \$RESPONSE -eq 200 ]; then
            echo
            echo "Application Verified"
            break
        fi

        if [ \$COUNTER -eq \$MAX_COUNTER ]; then
          echo "Max Validation Attempts Exceeded. Failed Verifying Application Deployment..."
          exit 1
        fi

        sleep \$DELAY

      done

      set -e
      """
}
